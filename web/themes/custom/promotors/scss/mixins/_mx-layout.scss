//== Clearfixing
//
//============================================

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin reset-clearfix {
  &:after {
    content: none;
  }
}


//== Grid
//
//============================================

/*
  * Container of the grid system - usually the content.
  *
  * usage:
  *  @include container(); - Default.
  *  @include container(8); - Spans 8 columns of '12'.
  *
  * (optional) param: $max-width
  * Used to create a unique layout-container with its own max-width, not the default.
  *
  * (optional) param: $narrow-layout
  * Used with the .layout-container-narrow class to give specific width and padding dimensions
  * which are used for the article container according to the designs.
*/
@mixin container($max-width: $container-max-width, $narrow-layout: false) {
  margin-left: auto;
  margin-right: auto;
  max-width: rem($max-width);
  width: 100%;


  @if $narrow-layout == false {
    padding-left: layout('xs', 'container-padding');
    padding-right: layout('xs', 'container-padding');

    @include from-sm {
      padding-left: layout('sm', 'container-padding');
      padding-right: layout('sm', 'container-padding');
    }

    @include from-md {
      padding-left: layout('md', 'container-padding');
      padding-right: layout('md', 'container-padding');
    }

    @include from-lg {
      padding-left: layout('lg', 'container-padding');
      padding-right: layout('lg', 'container-padding');
    }

    @include from-xl {
      padding-left: layout('xl', 'container-padding');
      padding-right: layout('xl', 'container-padding');
    }

    @include from-hd {
      padding-left: layout('hd', 'container-padding');
      padding-right: layout('hd', 'container-padding');
    }
  }
  @else if $narrow-layout == true {
    max-width: calc( #{rem($max-width)} + (#{layout('xs', 'container-padding')} * 2) );
    padding-left: layout('xs', 'container-padding');
    padding-right: layout('xs', 'container-padding');

    @include from-sm {
      max-width: calc( #{rem($max-width)} + (#{layout('sm', 'container-padding')} * 2) );
      padding-left: layout('sm', 'container-padding');
      padding-right: layout('sm', 'container-padding');
    }
  }

}

/*
  * Row mixin - Parent container for the columns.
  *
  * usage:
  *  @include row().
*/
@mixin row() {
  display: flex;
  flex-flow: row wrap;
}

/*
  * Column span - how wide the element should be.
  *
  * usage:
  *  @include col(8); - Width: 8 cols & 7 gutters.
  *  @include col(4, 4) - Width: 4 columns & 4 gutters.
  *
  * (optional) param: $component-layout
  * Used for handling rearranging layout of columns. e.g. from quarters to halves.
  * Usage:
  * @include col(6, $component-layout: 'halves'); - make the column 6 cols in width (50%). and stack in two columns
  *
  * (optional) param: $column-base
  * Used for changing the grid column base from default 12 cols, to anything you like, e.g 10 cols,
  * Useful for unique layouts
  * Usage:
  * @include col(2, $column-base: 10); Gives us a column of width 2 cols, on a base of 10,
  * meaning there would be 8 cols more available in this row.
  *
  * (optional) param: $use-gutter
  * Gives to option to remove the gutter and have columns butt up against each other for a tight layout.
  * Default is to have gutters, but we can turn them off.
  * Usage:
  * @include col(6, $use-gutter: false); Switches off the gutter (margin-right) for this column.
  *
*/
@mixin col($columns, $gutters: $columns - 1, $component-layout: 'null', $column-base: $column-base-default, $use-gutter: true) {
  // @if $use-gutter == false {
  //   $gutters: $columns;
  // }

  width: calc-col-width($columns, $gutters);

  @include from-sm {
    $gutter-width: layout('sm', 'gutter-width-inner');
    width: calc-col-width($columns, $gutters, $gutter-width, $column-base);
  }

  @include from-md {
    $gutter-width: layout('md', 'gutter-width-inner');
    width: calc-col-width($columns, $gutters, $gutter-width, $column-base);
  }

  @include from-lg {
    $gutter-width: layout('lg', 'gutter-width-inner');
    width: calc-col-width($columns, $gutters, $gutter-width, $column-base);

    @media screen and (-ms-high-contrast: none) {
      flex: 1;
    }
  }

  @include from-xl {
    $gutter-width: layout('xl', 'gutter-width-inner');
    width: calc-col-width($columns, $gutters, $gutter-width, $column-base);
  }

  @include from-hd {
    $gutter-width: layout('hd', 'gutter-width-inner');
    width: calc-col-width($columns, $gutters, $gutter-width, $column-base);
  }

  // As long as the column isn't one full-width column, we'll set the margin-right for it.
  @if $columns != 12 {
    @if ($use-gutter == true) {
      &:not(:last-child) {
        margin-right: layout('xs', 'gutter-width-inner');

        @include from-sm {
          margin-right: layout('sm', 'gutter-width-inner');
        }

        @include from-md {
          margin-right: layout('md', 'gutter-width-inner');
        }

        @include from-lg {
          margin-right: layout('lg', 'gutter-width-inner');
        }

        @include from-xl {
          margin-right: layout('xl', 'gutter-width-inner');
        }

        @include from-hd {
          margin-right: layout('hd', 'gutter-width-inner');
        }
      }
    }
  }

  // Component Layouts (optional)
  // If used, this allows you to take care of which columns have the margin-right property,
  // based on the layout being rendered at the chosen breakpointing.
  //
  // For example:
  // You may be going down from a 4 column layout (quarters/25%),
  // to a 2 column layout (halves/50%). We'd need to remove the margin-right on col 2 & 4.
  // @debug $component-layout;

  @if $component-layout == 'fullwidth' {
    // Used on any col layout that is going full width (100%) stacked.
    // e.g. on the mobile breakpoint on the called component.
    margin-right: 0;
  }
  @else if ($component-layout == 'halves') or ($component-layout == 'fourToTwo') {
    // Used on component with 4 col layout, to go down to 2 col layout
    // Or any component with an even number that can be halved. e.g. 6 col => 2 col
    &:nth-child(even) {
      margin-right: 0;
    }
  }
  @else if ($component-layout == 'thirds') or ($component-layout == 'sixToThree') {
    // Used on component with 6 col layout, to go down to 3 col layout
    // Or any component that can be divided by 3. e.g. 9 or 12 col => 3 col
    &:nth-child(3n) {
      margin-right: 0;
    }
  }
  @else if ($component-layout == 'sixths') or ($component-layout == 'twelveToSix') {
    // Used on component with 12 col layout, to go down to 6 col layout
    &:nth-child(6n) {
      margin-right: 0;
    }
  }

}

/*
  * Skip - how many columns we want the element to skip.
  *
  * usage:
  *  @include skip(3); - Skips 3 columns (and 3 gutters);
  *  @include skip(3, 2); - Skips 3 columns and 2 gutters);
  *  @include skip(1, 0); - Skips 1 column and 0 gutters);
*/
@mixin skip($columns, $gutters: $columns, $property: 'margin') {
  #{$property}-left: calc-skip-width($columns, $gutters);

  @include from-sm {
    $gutter-width: layout('sm', 'gutter-width-inner');
    #{$property}-left: calc-skip-width($columns, $gutters, $gutter-width);
  }

  @include from-md {
    $gutter-width: layout('md', 'gutter-width-inner');
    #{$property}-left: calc-skip-width($columns, $gutters, $gutter-width);
  }

  @include from-lg {
    $gutter-width: layout('lg', 'gutter-width-inner');
    #{$property}-left: calc-skip-width($columns, $gutters, $gutter-width);
  }

  @include from-xl {
    $gutter-width: layout('xl', 'gutter-width-inner');
    #{$property}-left: calc-skip-width($columns, $gutters, $gutter-width);
  }
}
